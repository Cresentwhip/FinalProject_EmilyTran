let dad, kid;
let Children = [];
let Vertical = [];
let Horizontal = [];
let Patrol = [];
let sideboundary, verticalboundary;
let xdirection = 1;
let ydirection = 1;
let kidsCaught;
let levelOneKids = [];
let levelTwoKids = [];
let levelThreeKids = [];
let obstacles, walls;

//Maze Options
let totalLevelWalls = 10;
let levelsTotal = 3;


//GOALS
let totalKids = 15; //max kids to pick up
let lastmaze = 3;

function preload() {

}

function setup() {

	background('gray');
	createCanvas(windowWidth, windowHeight);
	frameRate(120);

	//Starting components
	kidsCaught = 0; //start with 0 kids picked up
	levelmaze = 1; //start at level 1

	//maze setup
	sideboundary = width - 50 - width / 4; //prevents stuckage
	verticalboundary = height - height / 10;
	addMaze();



	//movement & level assignment
	for (let i = 0; i < totalKids; i++) { //create  kids on the screen per level
		Children.push(new Kid(random(50, sideboundary), random(70, verticalboundary - 40), 25));
		Children[i].choice = int(random(1, 4)); //asign movement beforehand
		Children[i].levelAssignment = int(random(1, 4)); //asign movement beforehand

		//MOVEMENT
		if (Children[i].choice == 1) {
			Vertical.push(Children[i]);
		} else if (Children[i].choice == 2) {
			Horizontal.push(Children[i]);
		} else {
			Patrol.push(Children[i]);
		}

		//LEVEL
		if (Children[i].levelAssignment == 1) {
			levelOneKids.push(Children[i]);
		} else if (Children[i].levelAssignment == 2) {
			levelTwoKids.push(Children[i]);
		} else {
			levelThreeKids.push(Children[i]);
		}

		dad = new Father(0, 0, 25, 100); //draw father sprite
	}

}

function draw() {
// 	switch (kidsCaught) {
// 		case levelOneKids.length:
// 			addMaze();

// 			makesprites();
// 			checkKids();
// 			break;
// 		case levelTwoKids.length:
// 			addMaze();
// 			makesprites();

// 			checkKids();
// 			break;
// 		case levelThreeKids.length:
// 			addMaze();
// 			makesprites();

// 			checkKids();
// 			break;

// 		case totalKids:
// 			congratsScreen();
// 			break;
// 		default:

// 	}



	//Drawing
	background('gray');
	dad.display();
	// makesprites();


	dadMovements();
	kidMovements();

	for (let i = 0; i < Children.length; i++) {
		if (dad.hit(Children[i]) == true) {
			kidsCaught++;
		}
	}

// 	if (kidsCaught == levelOneKids){
// 	// dad.overlap(Children, kidIsCaught);
// 	}

	drawSprites();
	// if (dad.collide(Children,)) { //if kid collides with dad
	// 		kidsCaught++; //add 1 to kids caught
	// 		}


	print(kidsCaught);
	//BOTTOM SCOREBOARD
	//catchpen 
	fill(255);
	stroke('black');
	strokeWeight(5);
	catcherPen = rect(width - (width / 4), height - (height / 10), width / 4 - 5, height / 10 - 5);
	fill(0);
	textSize(24);
	strokeWeight(1);
	text('Kids Caught: ' + kidsCaught + '/' + (totalKids), width - width / 4 + 30, height - (height / 10) + 40);



}

//CLASSES

class Father {
	constructor(x, y, h, w) {
		this.x = random(x); //random location
		this.y = random(y);
		this.height = h;
		this.width = w;

		this.r = int(random(255));
		this.g = int(random(255));
		this.b = int(random(255));
		this.skin = color(this.r, this.g, this.b);
	}

	display() {
		fill(this.skin);
		rect(this.x, this.y, this.height, this.width);
	}

	hiding() {
		//if collide with spot, sprite changes, and if kid is on it, capture=true
	}

	hit(player) {
		if (Math.abs(this.x - player.x) < this.size / 2 + player.size / 2 && Math.abs(this.y - player.y) < this.size / 2 + player.size / 2) return true;
	}


}


class Kid {
	constructor(xx, yy, size) {
		this.x = xx;
		this.y = yy;
		this.size = size;

		this.r = int(random(255));
		this.g = int(random(255));
		this.b = int(random(255));
		this.skin = color(this.r, this.g, this.b);
	}

	display() {
		fill(this.skin);
		square(this.x, this.y, this.size);

	}

	bouncesidemove() {
		this.x = this.x + ((1) * xdirection); //reversal of direction when touch wall
		if (this.x > width - this.size || this.x < 0) {
			xdirection *= -1;
		}
	}

	bounceverticalmove() {
		this.y = this.y + ((1) * ydirection); //reversal of direction when touch wall
		if (this.y > height - this.size-100 || this.y < 0) {
			ydirection *= -1;
		}
	}

	patrollermove() {
		if (this.x <= width) {
			this.x++;
		} else {
			this.x = 0
		}
	}
}


//FUNCTIONS
function dadMovements() {
	//Dad movement
	if (keyIsDown(LEFT_ARROW)) {
		dad.x -= 5;
	}
	if (keyIsDown(RIGHT_ARROW)) {
		dad.x += 5;
	}
	if (keyIsDown(UP_ARROW)) {
		dad.y -= 5;
	} else if (keyIsDown(DOWN_ARROW)) {
		dad.y += 5;
	}

}

function kidMovements(){
	//children movement
	for (let i = 0; i < Children.length; i++) {
		Children[i].display();
	}
	for (let i = 0; i < Horizontal.length; i++) {
		Horizontal[i].bouncesidemove();
	}
	for (let i = 0; i < Vertical.length; i++) {
		Vertical[i].bounceverticalmove();
	}
	for (let i = 0; i < Patrol.length; i++) {
		Patrol[i].patrollermove();
	}
}

// function makesprites() {
// 	kidsprites = new Group();

// }

function kidIsCaught(){
	Children.remove();
	kidsCaught++;
}

function switchLevelScheck() { //controls the level boundaries of kids caught per level
}

function congratsScreen() {
	background('#30FF3B');
	textSize(36);
	fill(0);
	text('You Win!', width / 2 - (48 * 2), height / 2); //pixels per 36 size text is 48
	textSize(24);
	fill(255);
	text('Total Kids: ' + totalKids + '/' + (totalKids), width / 2 - (32 * 2 + 50), 400);
}

function addMaze() {
	obstacles = new Group();
	for (var i = 0; i < totalLevelWalls; i++) {
		var wall = createSprite(random(125, width - 125), (height / 5) * i, random(10, 150), random(10, 150)); //randomize size, location and shape
		obstacles.shapeColor = color(0);
		obstacles.add(wall);
	}
}



